---
import SocialStack from "@/components/common/SocialStack.astro";

import CloseIcon from "@/icons/common/Close.astro";
import GitHubIcon from "@/icons/social/GitHub.astro";
import ZoomIcon from "@/icons/common/Zoom.astro";

const { title, image, imagehd, altImage, slug, github } = Astro.props;
---

<div
  class="bg-slate-180 dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 relative flex flex-col justify-between h-full"
>
  <button
    class="cursor-pointer project-image focus:outline-none openModalBtn"
    data-imagehd={imagehd}
  >
    <img
      src={image}
      alt={altImage}
      class="w-full h-48 object-cover"
      transition:name={`project-image-${slug}`}
    />
  </button>

  <div class="p-2 flex-grow text-center">
    <h2 class="text-xl font-bold text-gray-800 dark:text-white">
      {title}
    </h2>
  </div>

  <!-- Vertically stacked buttons with equal width and height using SocialStack component -->
  <div class="p-2 flex flex-col items-center gap-2 mb-2">
    <SocialStack href={`/projects/${slug}`} target="_self">
      Project Details
      <ZoomIcon class="size-5" />
    </SocialStack>

    {
      github && (
        <SocialStack href={github}>
          Source Code
          <GitHubIcon class="size-5" />
        </SocialStack>
      )
    }
  </div>
</div>

<!-- Modal for image -->
<div
  id="modal"
  class="fixed inset-0 bg-black bg-opacity-80 hidden justify-center items-center z-50"
>
  <!-- Close Icon placed outside the image, in the modal div -->
  <button
    class="absolute top-4 right-4 p-2 text-white bg-black rounded-full closeModalBtn"
  >
    <CloseIcon class="w-6 h-6" />
  </button>

  <div class="relative max-w-3xl max-h-3xl mx-auto modalImageContainer">
    <img
      class="modalImage max-w-full max-h-full object-contain"
      alt={altImage}
    />
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const openModalBtns = document.querySelectorAll(".openModalBtn");
    const modal = document.getElementById("modal");
    const closeModalBtn = document.querySelector(".closeModalBtn");
    const modalImage = modal?.querySelector(
      ".modalImage"
    ) as HTMLImageElement | null;

    openModalBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const imagehd = btn.getAttribute("data-imagehd");
        if (modalImage && imagehd) {
          modalImage.src = imagehd;
        }
        if (modal) {
          modal.classList.remove("hidden");
          modal.classList.add("flex");
        }
      });
    });

    if (closeModalBtn && modal) {
      closeModalBtn.addEventListener("click", () => {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
      });
    }

    // Close the modal when clicking outside the image
    if (modal) {
      modal.addEventListener("click", (event) => {
        if (event.target === modal) {
          modal.classList.add("hidden");
          modal.classList.remove("flex");
        }
      });
    }
  });
</script>
