---
import TailwindIcon from "@/icons/styling/Tailwind.astro";
import NextJSIcon from "@/icons/Framework/NextJS.astro";
import HTMLIcon from "@/icons/front/HTML.astro";
import CSSIcon from "@/icons/styling/CSS.astro";
import JavaScriptIcon from "@/icons/front/JavaScript.astro";
import TechnologiesData from "@/../data/technologies.json";

// Define a union type for the icon names
type IconName =
  | "TailwindIcon"
  | "NextJSIcon"
  | "HTMLIcon"
  | "CSSIcon"
  | "JavaScriptIcon";

// Create an interface for each technology
interface Technology {
  name: string;
  icon: IconName; // Ensure icon is one of the valid keys
  colorClasses: string;
}

// Create a mapping from icon names to components
const ICONS: Record<IconName, any> = {
  TailwindIcon,
  NextJSIcon,
  HTMLIcon,
  CSSIcon,
  JavaScriptIcon,
};

// Assert the data from JSON as Technology[]
const TECHNOLOGIES = TechnologiesData as Technology[];
---

<div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
  {
    TECHNOLOGIES.map((technology) => {
      const IconComponent = ICONS[technology.icon]; // Safely get the icon component

      return (
        <div
          class={`flex flex-col items-center justify-center p-4 transition-all duration-300 ${technology.colorClasses} hover:scale-110 rounded-lg shadow-md`}
        >
          <IconComponent class="size-12" />
          <span class="mt-2 text-sm font-semibold text-gray-150">
            {technology.name}
          </span>
        </div>
      );
    })
  }
</div>
